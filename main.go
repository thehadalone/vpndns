package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"os/signal"
	"regexp"
	"strings"
	"syscall"
)

const (
	resolvConf     = "/etc/resolv.conf"
	resolvConfTemp = "/etc/resolv.conf.tmp"
)

var ipRegexp = regexp.MustCompile("dhcp-option DNS ([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})")

func main() {
	cmd := exec.Command("sudo", "openvpn", "--config", os.Args[1])
	cmd.Stderr = os.Stderr
	cmd.Stdin = os.Stdin
	out, err := cmd.StdoutPipe()
	if err != nil {
		stop(cmd, err)
	}

	err = cmd.Start()
	if err != nil {
		stop(cmd, err)
	}

	err = changeDNS(getAddresses(out))
	if err != nil {
		stop(cmd, err)
	}

	sigs := make(chan os.Signal)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	<-sigs

	stop(cmd, nil)
}

func getAddresses(input io.ReadCloser) []string {
	var addresses []string
	scanner := bufio.NewScanner(input)
	for scanner.Scan() {
		fmt.Println(scanner.Text())
		if strings.Contains(scanner.Text(), "Initialization Sequence Completed") {
			break
		}

		results := ipRegexp.FindAllStringSubmatch(scanner.Text(), -1)
		for _, result := range results {
			addresses = append(addresses, result[1])
		}
	}

	return addresses
}

func changeDNS(addresses []string) error {
	renameCmd := exec.Command("sudo", "mv", "-f", resolvConf, resolvConfTemp)
	err := renameCmd.Run()
	if err != nil {
		return err
	}

	content := "# Generated by vpndns\n\n"
	for _, addr := range addresses {
		content = content + "nameserver " + addr + "\n"
	}

	echoCmd := exec.Command("echo", "-e", content)
	teeCmd := exec.Command("sudo", "tee", resolvConf)

	echoOut, err := echoCmd.StdoutPipe()
	if err != nil {
		return err
	}

	teeCmd.Stdin = echoOut

	err = echoCmd.Start()
	if err != nil {
		return err
	}

	err = teeCmd.Start()
	if err != nil {
		return err
	}

	err = echoCmd.Wait()
	if err != nil {
		return err
	}

	return teeCmd.Wait()
}

func restoreDNS() error {
	if _, err := os.Stat(resolvConfTemp); os.IsNotExist(err) {
		return nil
	}

	renameCmd := exec.Command("sudo", "mv", "-f", resolvConfTemp, resolvConf)
	err := renameCmd.Run()
	if err != nil {
		return err
	}

	removeCmd := exec.Command("sudo", "rm", "-f", resolvConfTemp)

	return removeCmd.Run()
}

func stop(cmd *exec.Cmd, err error) {
	exitCode := 0

	if err != nil {
		exitCode = 1
		log.Println(err)
	}

	if cmd != nil && cmd.Process != nil {
		cmd.Process.Signal(syscall.SIGINT)
	}

	err = restoreDNS()
	if err != nil {
		exitCode = 1
		log.Println(err)
	}

	os.Exit(exitCode)
}
